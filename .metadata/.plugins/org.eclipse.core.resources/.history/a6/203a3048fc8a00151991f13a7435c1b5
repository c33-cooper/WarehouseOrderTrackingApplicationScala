/**
 * Imports
 */
import scalafx.Includes._
import scalafx.application.JFXApp.PrimaryStage
import scalafx.scene.Scene
import scalafx.scene.control.Label
import scalafx.scene.layout.GridPane
import scalafx.geometry.Insets
import scalafx.scene.layout.HBox
import scalafx.scene.image.Image
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.control.PasswordField
import scalafx.scene.control.TextField
import javafx.scene.shape.Rectangle
import javafx.scene.paint.ImagePattern
import scalafx.beans.property.StringProperty.sfxStringProperty2jfx
import scalafx.scene.image.Image.sfxImage2jfx
import scalafx.scene.paint.Color._

/**
 * @author callum
 * @description LoginGUI.scala is the class that sets
 *              up the interfaces for the user login.
 */
class LoginGUI(stage : PrimaryStage) {
  
  /**
   *  Window attributes
   */
  stage title = "Warehouse Order Tracking Application V1.3"
  stage width = 300
  stage height = 225
  
  /**
   * Initialise the scene
   */
  def initScene : Scene = {
    
    // Create a new scene for the login
    val loginScene = new Scene{
      
      // fill the scene Cornflower blue
      fill = CornflowerBlue
      
      // content of the scene goes here
      content = new HBox {
        // child 1
        children = Seq(initGridPane)
      }
    }
    loginScene
  }
  
  /**
   * Initialise login button
   */
  def initLoginButton(usernameField : TextField, passwordField : TextField) : Button = {

    // Create a button so the user can login
    val button : Button = new Button {
      // text field
      text = ("Log in")
      minWidth = 40
      minHeight = 30
      
      // Adds an event listener to the button
      onAction = (ae : ActionEvent) => {
        // Login details
        val user : String = usernameField.text getValue
        val pass : String = passwordField.text getValue
        
        // Create a Employee object & login by using an
        // Message Digest encryption
        val md5Encryptiion : MD5Encryption = new MD5Encryption
        val employee = new Employee(user, md5Encryptiion encryptPassword(pass))
        employee establishEmployeesFromDatabase
       
       // Verify the login
       if (employee verifyEmployeeLogin) {
         // If verification of employee login has been
         // made, display new logged on window.
         val menuGUI : MenuGUI = new MenuGUI
         menuGUI renderMenu
       }
       else {
         failedLoginMessage
       }
      }
    }
    button
  }
  
  def initTestButton : Button ={
    // Test button
    val testButton : Button = new Button {
      onAction = (ae : ActionEvent) => {
        val menuGUI : MenuGUI = new MenuGUI
        menuGUI renderMenu
      }
    }
    testButton
  }
  
  /**
     * Show error message for failed login
     */
    def failedLoginMessage() {
      println("LOG IN FAILED!!")
    }
  
  /**
   * Create a rectangle for high cohesion
   */
//  def createRect : Rectangle = {
//    
//  }
  
  /**
   * Create a username text field
   */
  val username = new TextField{
    promptText = ("Username: ")
  }
  
  /**
   * Create a password text field
   */
  val passwordField = new PasswordField{
    promptText = "Password: "
  }
  
  /**
   * Initialise grid pane for the scene
   */
  def initGridPane : GridPane = {
    
    // Initialise a grid pane for the scene, the gridpane
    // basically sets a horizontal gap and a vertical gap
    // within the scene, so that items can be added to the
    // scene. Also creates padding from 
    new GridPane {
      hgap = 10
      vgap = 10
      padding = Insets(20, 100, 10, 10)
      
      // UI login features
      add(new Label("Username: "), 0, 4)
      add(username, 1, 4)
      add(new Label("Password: "), 0, 5)
      add(passwordField, 1, 5)
      add(initLoginButton(username, passwordField), 1, 7)
      add(initTestButton, 2, 7)
    }
  }
  
  /**
   * Show the login interface
   */
  def renderLogin : Unit = {
    stage.setScene(initScene)
  }
}